#include "BinarySearchTree.h"
#include <ctime>

// 测试二分搜索树中的removeMin和removeMax
int main() {

    srand(time(NULL));
    BinarySearchTree<int, int> bst = BinarySearchTree<int, int>();

    // 取n个取值范围在[0...m)的随机整数放进二分搜索树中
    int n = 100;
    int m = 100;
    for (int i = 0; i < n; i++) {
        int key = rand() % m;
        // 为了后续测试方便,这里value值取和key值一样
        int value = key;
        //cout<<key<<" ";
        bst.insert(key, value);
    }
    // 注意, 由于随机生成的数据有重复, 所以bst中的数据数量大概率是小于n的

    // 测试 removeMin
    // 输出的元素应该是从小到大排列的
    cout << "Test removeMin: " << endl;
    while (!bst.isEmpty()) {
        cout << "min: " << bst.minimum() << " , ";
        bst.removeMin();
        cout << "After removeMin, size = " << bst.size() << endl;
    }
    cout << endl;


    for (int i = 0; i < n; i++) {
        int key = rand() % n;
        // 为了后续测试方便,这里value值取和key值一样
        int value = key;
        //cout<<key<<" ";
        bst.insert(key, value);
    }
    // 注意, 由于随机生成的数据有重复, 所以bst中的数据数量大概率是小于n的

    // 测试 removeMax
    // 输出的元素应该是从大到小排列的
    cout << "Test removeMax: " << endl;
    while (!bst.isEmpty()) {
        cout << "max: " << bst.maximum() << " , ";
        bst.removeMax();
        cout << "After removeMax, size = " << bst.size() << endl;
    }

    system("pause");
    return 0;
}